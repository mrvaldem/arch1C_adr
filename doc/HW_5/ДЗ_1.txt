# [ADR.001] [Выбор архитектуры для решения портала командировок]
<!-- Название ADR состоит из [ADR.###] [Коротко суть принятого решения] -->
[ADR.001] [Выбор архитектуры для решения портала командировок]
* Статус: Предложено
* Владелец: Владимир Листопадов

## Контекст
Интеграция по командировкам между системой планирования командировок и системами 1С для отражения фактических затрат в рамках бюджета подразделения, а также автоматическом отражении в табеле рабочего времени,  Отчете «Расчетный лист», формирования документа «Авансовый отчет» и выплата денежных средств на расчетный счет сотрудника.

<!-- Описание проблемы, требующей решения, причин, побудивших принять решение, ограничений, действовавших на момент принятия решения -->
В наличии:
1. Фронт - рабочее место роли "Отправителя в командировку" на сайте компании.
2. Система планирования денежных средств - 1С:УТ
3. Система оперативного учета - 1С:УТ
4. Система бухгалтерского учета - 1С:БУ
5. Система учета рабочего времени сотрудников и зарплаты - 1С:ЗУП

Задача: Минимизировать время принятия решения об отправки сотрудника в командировку. Исключить ошибки несогласованных дынных (например "сотрудник должен быть в отпуске" на период командировки).

## Варианты решения
<!-- Описание рассмотренных вариантов c их плюсами и минусами -->

### Вариант 1. "Схема - звезда"
<!-- Описание варианта 1 -->
Инициатор "посыла" в командировку - фронт системы. Фронт шлет последовательные запросы в системы-приемники и ожидает ответы.
Только после очередного ответа может быть выполнен следующий запрос.
1. Фронт <-> УТ (план ДС) 2. Фронт <-> ЗУП 3. Фронт <-> УТ (опер.) 4. Фронт <-> ЗУП

* Плюсы
  * Единое место "принятия" решения - фронт.
* Минусы
  * Долгое время согласования. Возможное устаревание данных.
  * На фронте бизнес-логика.
  * Сложная реализация.

### Вариант 2. "Схема - цепочка обязанностей"
<!-- Описание варианта 2 -->
Инициатор "посыла" в командировку - фронт системы. Фронт шлет параллельные запросы в системы-приемники и ожидает ответы. Системы сами реализуют цепочку обязанностей. Фронт получает готовый результат.
1. Фронт <-> УТ (план ДС)
1. Фронт <-> ЗУП 
1. Фронт <-> УТ (опер.)
2. Фронт <-> ЗУП

* Плюсы
  * Минимальное время принятия решения.
  * На фронте нет никакой бизнес-логики.
  * Фронт всегда клиент.
  * Несложная реализация.
* Минусы
  * ?

## Решение
<!-- Описание выбранного решения. Решение должно быть сформулировано чётко ("Мы используем...", "Мы не используем", а не "Желательно.." или "Предлагается...").-->
Необходимо разработать оптимальный бизнес-процесс принятия решения. Какие запросы можно выполнять параллельно, а какие последовательно.
Выбрать технологию обмена сообщениями.
Контракты обмена сообщениями.

## Последствия
<!-- Положительные и отрицательные последствия (trade-offs). Арх. решения, которые потребуется принять как следствие принятого решения. Если решение содержит риски, то описано, как с ними планируют поступить (за счет чего снижать, почему принять). -->
Оценить дополнительные затраты по приобритению дополнительного оснащения.
Объем доработок. Сопутствующие расходы на тестирование, обучение, внедрение.

